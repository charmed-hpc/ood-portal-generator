#
# Open OnDemand Portal
#
# Generated using `gen-ood-portal`
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!                                    !!
# !!     DO NOT EDIT THIS FILE          !!
# !!                                    !!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# This file is auto-generated by gen-ood-portal and will be over-written
# in future updates.
#
# 1. To modify this file, first update the global configuration file:
#
#      /etc/ood/config/ood_portal.yml
#
#    You can find more information about the ood-portal-generator configuration
#    at:
#
#      https://osc.github.io/ood-documentation/latest/reference/commands/ood-portal-generator.html
#
# 2. Then build/install the updated Apache config with:
#
#      sudo gen-ood-portal -o <APACHE_CONF_DIR> /etc/ood/config/ood_portal.yml
#
# 3. Finally, restart Apache to have the changes take effect:
#
#      # For Ubuntu 22.04
#      sudo systemctl try-restart apache2 apache-htcacheclean
#

{{- if .ListenAddrPort}}
# Listen should always be one of:
#     - <port>
#     - <ipv4>:<port>
#     - <ipv6>:<port>
#
{{range .ListenAddrPort -}}
Listen {{.}}
{{- end}}
{{- end}}

{{- if and .Ssl .UseRewrites}}
# Redirect all http traffic to the https Open OnDemand portal URI
#     http://*:{{.Port}}
#     #=> {{.Protocol}}<%= @proxy_server || "localhost" %>:{{.Port}}
#
<VirtualHost *:80>
  {{if .ServerName -}}
  ServerName {{.ServerName}}
  {{- end}}
  {{range .ServerAliases -}}
  ServerAlias {{.}}
  {{- end}}

  RewriteEngine On
  RewriteRule ^(.*) {{.Protocol}}{{.ProxyServer}}:{{.Port}}$1 [R=301,NE,L]
</VirtualHost>
{{- end}}

# The Open OnDemand portal VirtualHost
#
<VirtualHost *:{{.Port}}>
  {{ if .ServerName -}}
  ServerName {{.ServerName}}
  {{- end}}
  {{range .ServerAliases -}}
  ServerAlias {{.}}
  {{- end}}

  {{if not .DisableLogs -}}
  ErrorLog "{{.ErrorLog}}"
  {{if .LogFormat -}}
  LogFormat {{.LogFormat}}
  TransferLog "{{.AccessLog}}"
  {{else -}}
  CustomLog "{{.AccessLog}}" combined
  {{- end}}
  {{- end}}

  {{if and .ServerName .UseRewrites -}}
  RewriteEngine On
  {{range $server := chain .ServerAliases .ProxyServer -}}
  RewriteCond %{HTTP_HOST} !^({{$server}}(:{{.Port}})?)?$ [NC]
  {{- end}}
  RewriteRule ^(.*) {{.Protocol}}{{.ProxyServer}}:{{.Port}}$1 [R=301,NE,L]
  {{- end}}

  {{if and .UseRewrites .UseMaintenance -}}
  # Support maintenance page during outages of OnDemand
  RewriteEngine On
  RewriteCond {{.PublicRoot}}/maintenance/index.html -f
  RewriteCond /etc/ood/maintenance.enable -f
  RewriteCond %{REQUEST_URI} !{{.PublicUri}}/maintenance/.*$
  {{range $ip := .MaintenanceIPAllowlist -}}
  RewriteCond %{REMOTE_ADDR} !^{{escapeIPv4 $ip}}
  {{- end}}
  RewriteRule ^.*$ {{.PublicUri}}/maintenance/index.html [R=302,L]

  {{- end}}
  TraceEnable off

  {{if .SecurityCspFrameAncestors -}}
  Header always set Content-Security-Policy "frame-ancestors {{.SecurityCspFrameAncestors}};"
  {{- end}}
  {{if .SecurityStrictTransport -}}
  Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
  {{- end}}
  {{if .Ssl -}}

  SSLEngine On
  {{range .Ssl -}}
  {{.}}
  {{- end}}
  {{- end}}

  {{if and .OidcUri .OidcProviderMetadataUrl .OidcClientId -}}
  # OIDC configuration
  #
  OIDCProviderMetadataURL {{.OidcProviderMetadataUrl}}
  OIDCClientID {{.OidcClientId}}
  {{if .oidcClientSecret -}}
  OIDCClientSecret {{.OidcClientSecret}}
  {{- end}}
  OIDCRedirectURI {{.OidcRedirectUri}}
  OIDCRemoteUserClaim {{.OidcRemoteUserClaim}}
  OIDCScope "{{.OidcScope}}"
  OIDCCryptoPassphrase {{.OidcCryptoPassphrase}}
  OIDCSessionInactivityTimeout {{.OidcSessionInactivityTimeout}}
  OIDCSessionMaxDuration {{.OidcSessionMaxDuration}}
  OIDCStateMaxNumberOfCookies {{.OidcStateMaxNumberOfCookies}}
  OIDCCookieSameSite {{.OidcCookieSameSite}}
  {{range $setting, $value := .OidcSettings -}}
  {{$setting}} {{$value}}
  {{- end}}

  {{if and .DexUri .Dex -}}
  ProxyRequests Off
  ProxyPreserveHost On
  ProxyAddHeaders On
  ProxyPass {{.DexUri}} http://localhost:{{.Dex.HttpPort}}{{.DexUri}}
  ProxyPassReverse {{.DexUri}} http://localhost:{{.Dex.HttpPort}}{{.DexUri}}

  {{- end}}
  {{- end}}
  # Lua configuration
  #
  {{if .LuaRoot -}}
  LuaRoot "{{.LuaRoot}}"
  {{- end}}
  LogLevel lua_module:{{.LuaLogLevel}}

  # Log authenticated user requests (requires min log level: info)
  LuaHookLog logger.lua logger

  # Authenticated-user to system-user mapping configuration
  #
  {{if .UserMapCmd -}}
  SetEnv OOD_USER_MAP_CMD "{{.UserMapCmd}}"
  {{else if .UserMapMatch -}}
  SetEnv OOD_USER_MAP_MATCH "{{.UserMapMatch}}"
  {{- end}}
  {{if .UserEnv -}}
  SetEnv OOD_USER_ENV "{{.UserEnv}}"
  {{- end}}
  {{if .MapFailUri -}}
  SetEnv OOD_MAP_FAIL_URI "{{.MapFailUri}}"
  {{- end}}

  # Per-user Nginx (PUN) configuration
  # NB: Apache will need sudo privs to control the PUNs
  #
  SetEnv OOD_PUN_STAGE_CMD "{{.PunStageCmd}}"

  {{if .PunPreHookRootCmd -}}
  # Run a root level pre hook before starting nginx
  SetEnv OOD_PUN_PRE_HOOK_ROOT_CMD "{{.PunPreHookRootCmd}}"
  {{if .PunPreHookExports -}}
  # Environment variables to export to the PUN pre hook.
  SetEnv OOD_PUN_PRE_HOOK_EXPORTS "{{.PunPreHookExports}}"
  {{- end}}
  {{- end}}

  {{if .AllowedHosts -}}
  SetEnv OOD_ALLOWED_HOSTS "{{commaSeparate .AllowedHosts}}"
  {{- end}}

  {{range .CustomVhostDirectives -}}
  {{.}}
  {{- end}}

  #
  # Below is used for sub-uri's this Open OnDemand portal supports
  #

  {{if and .PublicUri .PublicRoot -}}
  # Serve up publicly available assets from local file system:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @public_uri %>/favicon.ico
  #     #=> <%= @public_root %>/favicon.ico
  #
  Alias "{{.PublicUri}}" "{{.PublicRoot}}"
  <Directory "{{.PublicRoot}}">
    Options FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  {{- end}}

  {{if .NodeUri -}}
  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %>{{.nodeURI}}/HOST/PORT/index.html
  #     #=> http://HOST:PORT<%= @node_uri %>/HOST/PORT/index.html
  #
  <LocationMatch "^{{.NodeUri}}/(?<host>{{.HostRegex}})/(?<port>\d+)">
    {{range .Auth -}}
    {{.}}
    {{- end}}

    {{range .CustomLocationDirectives -}}
    {{.}}
    {{- end}}

    # ProxyPassReverse implementation
    Header edit Location "^[^/]+//[^/]+" ""

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path={{.NodeUri}}/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>
  {{- end}}

  {{if .RnodeUri -}}
  # Reverse "relative" proxy traffic to backend webserver through IP sockets:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @rnode_uri %>/HOST/PORT/index.html
  #     #=> http://HOST:PORT/index.html
  #
  <LocationMatch "^{{.RnodeUri}}/(?<host>{{if .HostRegex}}{{.HostRegex}}{{else}}"[^/]+"{{end}})/(?<port>\d+)(?<uri>/.*|)">
    {{range .Auth -}}
    {{.}}
    {{- end}}

    {{range .CustomLocationDirectives -}}
    {{.}}
    {{- end}}

    # ProxyPassReverse implementation
    Header edit Location "^([^/]+//[^/]+)|(?=/)|^([\./]{1,}(?<!/))" "{{.RnodeUri}}/%{MATCH_HOST}e/%{MATCH_PORT}e"

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path={{.RnodeUri}}/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>
  {{- end}}

  {{if and .PunUri .NginxUri -}}
  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @pun_uri %>/dev/app/simulations/1
  #     #=> unix:/path/to/socket|http://localhost<%= @pun_uri %>/dev/app/simulations/1
  #
  SetEnv OOD_PUN_URI "{{.PunUri}}"
  <Location "{{.PunUri}}">
    {{range .Auth -}}
    {{.}}
    {{- end}}

    {{range .CustomLocationDirectives -}}
    {{.}}
    {{- end}}

    ProxyPreserveHost On
    ProxyAddHeaders On
    ProxyPassReverse "http://localhost{{.PunUri}}"

    # ProxyPassReverseCookieDomain implementation (strip domain)
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation (less restrictive)
    Header edit* Set-Cookie ";\s*(?i)Path\s*=(?-i)(?!\s*{{.PunUri}})[^;]*" "; Path={{.PunUri}}"

    SetEnv OOD_PUN_SOCKET_ROOT "{{.PunSocketRoot}}"
    SetEnv OOD_PUN_MAX_RETRIES "{{.PunMaxRetries}}"
    LuaHookFixups pun_proxy.lua pun_proxy_handler

    {{if .Analytics -}}
    SetEnv OOD_ANALYTICS_TRACKING_URL "{{.Analytics.Url}}"
    SetEnv OOD_ANALYTICS_TRACKING_ID  "{{.Analytics.Id}}"
    LuaHookLog analytics.lua analytics_handler
    {{- end}}
  </Location>

  # Control backend PUN for authenticated user:
  # NB: See mod_ood_proxy for more details.
  #
  #    <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @nginx_uri %>/stop
  #    #=> stops the authenticated user's PUN
  #
  SetEnv OOD_NGINX_URI "{{.NginxUri}}"
  <Location "{{.NginxUri}}">
    {{range .Auth -}}
    {{.}}
    {{- end}}

    {{range .CustomLocationDirectives -}}
    {{.}}
    {{- end}}

    LuaHookFixups nginx.lua nginx_handler
  </Location>
  {{- end}}

  {{if .RootUri -}}
  # Redirect root URI to specified URI
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %>/
  #     #=> <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @root_uri %>
  #
  RedirectMatch ^/$ "{{.RootUri}}"
  {{- end}}

  {{if and .LogoutUri .LogoutRedirect -}}
  # Redirect logout URI to specified redirect URI
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @logout_uri %>
  #     #=> <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @logout_redirect %>
  #
  Redirect "{{.LogoutUri}}" "{{.LogoutRedirect}}"
  {{- end}}

  {{if .OidcUri -}}
  # OpenID Connect redirect URI:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @oidc_uri %>
  #     #=> handled by mod_auth_openidc
  #
  <Location "{{.OidcUri}}">
    {{range .Auth -}}
    {{.}}
    {{- end}}

    {{range .CustomLocationDirectives -}}
    {{.}}
    {{- end}}
  </Location>
  {{- end}}

  {{if and .UseRewrites .UseMaintenance -}}
  # Maintenance location
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @public_uri %>/maintenance
  #     #=> Displays <%= @public_root %>/maintenance/index.html
  #
  <Directory "{{.PublicRoot}}/maintenance">
    RewriteCond /etc/ood/maintenance.enable !-f
    ReWriteRule ^.*$ /

    RewriteCond %{REQUEST_URI} {{.PublicUri}}/maintenance/.*$
    RewriteRule ^.*$ {{.PublicUri}}/maintenance/index.html [R=503,L]
    ErrorDocument 503 {{.PublicUri}}/maintenance/index.html
  </Directory>
  {{- end}}

  {{if and .OidcDiscoverUri .OidcDiscoverRoot -}}
  # Discover URI for OpenID Connect (used for multiple Id Providers):
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @oidc_discover_uri %>
  #     #=> <%= @oidc_discover_root %>/
  #
  Alias "{{.OidcDiscoverUri}}" "{{.OidcDiscoverRoot}}"
  <Directory "{{.OidcDiscoverRoot}}">
    Options FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  {{- end}}

  {{if and .RegisterUri .RegisterRoot -}}
  # Register and/or unregister the mapping of an authenticated-user to a system-user
  # NB: This is not needed for regular expression mapping
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @register_uri %>
  #     #=> <%= @register_root %>/
  #
  Alias "{{.RegisterUri}}" "{{.RegisterRoot}}"
  <Directory "{{.RegisterRoot}}">
    Options FollowSymLinks
    AllowOverride None

    {{range .Auth -}}
    {{.}}
    {{- end}}
  </Directory>
  {{- end}}
</VirtualHost>